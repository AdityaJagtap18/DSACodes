#include <iostream>
#include <fstream>
using namespace std;

class Employee
{
public:
    int employeeId;
    string name;
    string designation;
    int experience;
    int age;

    void accept()
    {
        cout << "\n\tEnter Employee ID: ";
        cin >> employeeId;
        cout << "\n\tEnter the Name: ";
        cin >> name;
        cout << "\n\tEnter the Designation: ";
        cin >> designation;
        cout << "\n\tEnter the Experience: ";
        cin >> experience;
        cout << "\n\tEnter the Age: ";
        cin >> age;
    }

    int getEmployeeId()
    {
        return employeeId;
    }

    void show()
    {
        cout << "\n\t" << employeeId << "\t\t" << name << "\t\t" << designation << "\t\t" << experience << "\t\t" << age;
    }
};

int main()
{
    Employee e;
    int choice, ch1;
    int employeeId;
    fstream file, temp;

    do
    {
        cout << "\n>>>>>>>>>>>>>>>>>>>>>>MENU<<<<<<<<<<<<<<<<<<<<";
        cout << "\n1. Insert\n2. Show\n3. Search\n4. Delete an Employee Record\n5. Exit\n\tEnter the Choice --> ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            file.open("employee.txt", ios::out | ios::app);
            if (!file)
            {
                cout << "Error creating file!" << endl;
                break;
            }

            do
            {
                e.accept();
                file.write(reinterpret_cast<char *>(&e), sizeof(e));

                cout << "\nDo you want to enter more records?\n1. Yes\n2. No\n--> ";
                cin >> ch1;
            } while (ch1 == 1);

            file.close();
            break;

        case 2:
            file.open("employee.txt", ios::in);
            if (!file)
            {
                cout << "Error opening file!" << endl;
                break;
            }

            file.read(reinterpret_cast<char *>(&e), sizeof(e));
            while (!file.eof())
            {
                e.show();
                file.read(reinterpret_cast<char *>(&e), sizeof(e));
            }
            file.close();
            break;

        case 3:
            cout << "Enter Employee ID --> ";
            cin >> employeeId;

            file.open("employee.txt", ios::in);
            if (!file)
            {
                cout << "Error opening file!" << endl;
                break;
            }

            file.read(reinterpret_cast<char *>(&e), sizeof(e));
            while (!file.eof())
            {
                if (employeeId == e.employeeId)
                {
                    e.show();
                    break;
                }
                file.read(reinterpret_cast<char *>(&e), sizeof(e));
            }
            file.close();
            break;

        case 4:
            cout << "Enter Employee ID to delete --> ";
            cin >> employeeId;

            file.open("employee.txt", ios::in);
            if (!file)
            {
                cout << "Error opening file!" << endl;
                break;
            }

            temp.open("temp.txt", ios::out);
            if (!temp)
            {
                cout << "Error creating temporary file!" << endl;
                file.close();
                break;
            }

            file.read(reinterpret_cast<char *>(&e), sizeof(e));
            while (!file.eof())
            {
                if (e.employeeId != employeeId)
                {
                    temp.write(reinterpret_cast<char *>(&e), sizeof(e));
                }
                file.read(reinterpret_cast<char *>(&e), sizeof(e));
            }
            cout << "The record with the Employee ID " << employeeId << " has been deleted." << endl;
            file.close();
            temp.close();
            remove("employee.txt");
            rename("temp.txt", "employee.txt");
            break;
        }

    } while (choice != 5);

    return 0;
}
