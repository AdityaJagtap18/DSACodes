#include <iostream>
#include <cstring>

using namespace std;

class Tree {
	struct node {
		char key[10];
		char meaning[10];
		node* left;
		node* right;
	};
	node* root;

public:
	Tree() {
		root = NULL;
	}

	void inorder() {
		inorderrec(root);
	}

	void postorder() {
		postorderrec(root);
	}

	void create() {
		node* newnode = new node;
		newnode->left = newnode->right = NULL;
		cout << "Enter the keyword: ";
		cin >> newnode->key;
		cout << "Enter the meaning: ";
		cin >> newnode->meaning;

		if (root == NULL)
			root = newnode;
		else {
			node* current = root;
			node* parent = NULL;

			while (current != NULL) {
				parent = current;
				if (strcmp(newnode->key, current->key) < 0)
					current = current->left;
				else
					current = current->right;
			}

			if (strcmp(newnode->key, parent->key) < 0)
				parent->left = newnode;
			else
				parent->right = newnode;
		}
	}

	void inorderrec(node* root) {
		if (root != NULL) {
			inorderrec(root->left);
			cout << "\n\t" << root->key << "\t" << root->meaning;
			inorderrec(root->right);
			}
	}

	void postorderrec(node* root) {
		if (root != NULL) {
			postorderrec(root->left);
			postorderrec(root->right);
			cout << "\n\t" << root->key << "\t" << root->meaning;
		}
	}
};

int main() {
	Tree tr;

	tr.create();
	tr.create();
    tr.create();

	cout << "Inorder traversal:" << endl;
	tr.inorder();

	cout << "\nPostorder traversal:" << endl;
	tr.postorder();

	return 0;
}
